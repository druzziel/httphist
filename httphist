#!/usr/bin/python

import datetime, sys, math, operator

TIME_FORMAT = '%d/%b/%Y:%H:%M'
ONE_MINUTE = datetime.timedelta( minutes = 1 )
SCALE_FACTOR = 1
COLUMNS = 60


##########################################################
# functions for dealing with our dictionary.
# The dictionary has a key for every minute between
# the start and end of the log.  The value for each
# key is the number of requests that were logged in 
# that minute.
##########################################################

def get_dictionary( startTime, endTime ):
    "Returns a dictionary whose keys are timestamps between startTime and endTime, inclusive."
    i = startTime
    empty_dictionary = {}
    while i <= endTime:
        empty_dictionary[i] = 0
        i += ONE_MINUTE
    return empty_dictionary 

def print_dictionary( dictionary, autoscale=False ):
    longestLine = max(dictionary.iteritems(), key=operator.itemgetter(1))[1]
    autoscale_factor = float(COLUMNS) / longestLine
    if ( autoscale_factor >= 1 ) or ( not autoscale ):
        autoscale_factor = 1
    dkeys = dictionary.keys()
    dkeys.sort()
    for dkey in dkeys:
        count = dictionary[dkey]
        histoLine = get_histogram_line( int( count * autoscale_factor ) )
        print "{0} {1:>7} {2}".format(dkey, count, histoLine)

def get_histogram_line( lineCount ):
    # return a string of hash marks
    # the number of hash marks is lineCount / scaleFactor,
    # where scaleFactor defaults to 1.  Increasing scaleFactor reduces
    # the scale of the histogram
    length = math.ceil( float(lineCount) / float(SCALE_FACTOR) )
    return '#' * int(length)

def populate_dictionary( logfile, dictionary ):
    logfile.seek(0)
    for line in logfile:
        try:   # throw away any line without a timestamp
            timestamp = extract_time( line )
            dictionary[timestamp] += 1
        except:
            next

def populate_bandwidth_dictionary( logfile, dictionary ):
    logfile.seek(0)
    for line in logfile:
        try:
            timestamp = extract_time( line )
            bandwidth = extract_bandwidth( line )
            dictionary[timestamp] += bandwidth
        except:
            next

def filter_by_time( dictionary, startTime, endTime ):
    # return only those dictionary key-value pairs where the key falls between startTime and endTime
    filtered = dict()

    for (timeStamp, itemCount) in dictionary.items():
        if timeStamp <= endTime and timeStamp >= startTime:
            filtered[timeStamp] = itemCount

    return filtered

#############################
# End Dictionary Functions
#############################

#############################
# Time-handling functions
#############################

def convert_timestamp(apache_timestamp):
    """convert an Apache datetime string to a Python datetime object"""
    try:
        time_obj = datetime.datetime.strptime( apache_timestamp, TIME_FORMAT )
    except:
        raise TypeError, "%s is not a timestamp I recognize." % apache_timestamp
    return time_obj

def extract_time( input_line ):
    """Takes a line from the input file and returns a time object based on that line's timestamp"""
    bits = input_line.split()
    for field in bits:
        apache_timestamp = field[1:-3]
        try:
            return convert_timestamp( apache_timestamp )
        except:
            pass
    raise ValueError, "Unreachable line reached - no timestamp found in input line {}".format( input_line )

##############################
# End Time-handling functions
##############################


##############################
# Bandwidth-handling functions - experimental
##############################

def extract_bandwidth( input_line ):
    """Takes a line from the input file and returns the bytes transferred as an int"""
    bits = input_line.split()
    bandwidth = 0
    try:
        bandwidth = int(bits[9])
    except:
        pass
    return bandwidth

##################################
# End Bandwidth-handling functions
##################################

#############################
# Main loop helper functions
#############################

def openLog( logFileName ):
    try:
        fp = open( logFileName )
    except:
        print "Sorry, I couldn't open {0}.  Exiting.".format( logFileName )
        sys.exit()
    return fp

def get_log_start_and_stop_times( fp ):
    fp.seek(0)
    firstline = fp.readline()
    for line in fp:
        pass
    lastline = line
    startTime = extract_time( firstline )
    endTime = extract_time( lastline )
    return startTime, endTime

def add_arguments(parser):

    parser.add_argument("logfile",
        help="Apache/NCSA log file to analyze",
        type=str)

    parser.add_argument("-s", "--scaling_factor", 
        help="reduce the length of histogram lines by dividing by this value",
        type=int)

    parser.add_argument("-a", "--autoscale",
        help="automatically reduce histogram length to fit screen",
        action="store_true")

    parser.add_argument("-c", "--columns", "--cols",
        help="specify maximum column width",
        type=int)

    parser.add_argument("-b", "--bandwidth",
        help="provide bandwidth per minute instead of requests per minute",
        action="store_true")

    return parser


#################################
# End Main loop helper functions
#################################

if __name__ == "__main__":

    import argparse
    parser = argparse.ArgumentParser(description="generate a histogram from an Apache/NCSA log file showing per-minute usage")

    parser = add_arguments( parser )

    args = parser.parse_args()

    if args.scaling_factor:
        SCALE_FACTOR = args.scaling_factor
    if args.columns:
        COLUMNS = args.columns

    
    fp = openLog( args.logfile )

    # obtain first and last lines so we know start and end times
    startTime, endTime = get_log_start_and_stop_times( fp )

    # create a dictionary to hold our data
    myDictionary = get_dictionary(startTime, endTime)

    # fill 'er up
    if not args.bandwidth:
        populate_dictionary( fp, myDictionary )
    else:
        populate_bandwidth_dictionary( fp, myDictionary )

    fp.close()  # it's polite.

    # show us what you got
    autoscale = args.autoscale 
    print_dictionary( myDictionary, autoscale=autoscale )
